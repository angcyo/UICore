/**
 * 2022-12-14
 * LaserPecker 从Excel中读取材质参数
 *
 * http://maxmoto1702.github.io/groovy-excel-builder/
 *
 * https://www.cnblogs.com/-beyond/p/12764501.html
 *
 * */
buildscript {
    repositories {
        mavenCentral()
        /*maven {
            url "http://repo.serebryanskiy.site/"
            allowInsecureProtocol = true
        }*/
    }
    dependencies {
        // https://mvnrepository.com/artifact/org.apache.poi/poi
        //classpath 'org.apache.poi:poi:5.2.3'
        classpath 'org.apache.poi:poi-ooxml:5.2.3'
        // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
        classpath 'org.apache.logging.log4j:log4j-core:2.20.0'

        //https://jcenter.bintray.com/com/google/code/gson/gson/
        classpath "com.google.code.gson:gson:2.10.1"
    }
}

task _excelMaterialBlue(group: 'angcyo', description: '蓝光-LaserPecker 从Excel中读取材质参数') {
    //配置任务
}

task _excelMaterialWhite(group: 'angcyo', description: '白光-LaserPecker 从Excel中读取材质参数') {
    //配置任务
}

//#1:1064nm激光 (白光-雕) 0:450nm激光 (蓝光-烧)

//执行蓝光任务
_excelMaterialBlue.doLast {
    def laserType = 0
    def layerIndexList = [9, 11, 13, 15]
    def layerIdList = ["layerFill", "layerPicture", "layerLine", "layerCut"]
    exportExcelData(laserType, layerIndexList, layerIdList)
}

//执行白光任务
_excelMaterialWhite.doLast {
    //激光类型
    def laserType = 1
    def layerIndexList = [3, 5, 7]
    def layerIdList = ["layerFill", "layerPicture", "layerLine"]
    exportExcelData(laserType, layerIndexList, layerIdList)
}

def exportExcelData(laserType, layerIndexList, layerIdList) {
    //默认的excel文件路径
    def defExcelPath = 'material.xlsx'
    def excelPath = project.hasProperty("excel_path") ? project.ext.excel_path : defExcelPath
    def excelFile = file(excelPath)
    //println excelFile.absolutePath

    if (!excelFile.exists()) {
        throw new IllegalStateException("请在[gradle.properties]文件中配置excel文件路径:excel_path")
    }


    //输出文件
    def outputFile = file("material_${laserType}.json")

    //读取数据
    // 指定excel文件，创建缓存输入流
    def inputStream = new BufferedInputStream(new FileInputStream(excelFile))
    // 直接传入输入流即可，此时excel就已经解析了
    def workbook = new org.apache.poi.xssf.usermodel.XSSFWorkbook(inputStream)
    //println workbook
    def sheet = workbook.getSheetAt(0)

    //集合
    def jsonList = new ArrayList<Map<String, Object>>()

    def beforeMaterial = null //之前的材质
    def beforeResIdStr = null //之前的本地资源key

    def line = 3 //从第3行开始才有读取数据
    //println("总行数:${sheet.getPhysicalNumberOfRows()}")
    //1 / 0
    while (line < sheet.getPhysicalNumberOfRows()) {//一组一组读取(1K/2K/4K 一次性读取功率深度)
        def row = sheet.getRow(line)
        //printLine(line, row)
        //1 / 0
        def material = row.getCell(0).toString() //材质名称 环保纸
        def dpi = row.getCell(1).toString() //分辨率 1K 2K 4K
        def dpiScale = dpi.toLowerCase().replace("k", "") //缩放比例

        //
        if (!material.isBlank()) {
            beforeMaterial = material.split("/")[0]
            beforeResIdStr = material.split("/")[1]
        }

        material = beforeMaterial
        def resIdStr = beforeResIdStr

        def map = new HashMap<String, Object>()
        map.put("type", laserType)

        if (dpiScale.isBlank()) {
            //dpiScale 为空, 跳过处理
            println("${material} -> dpiScale 为空, 跳过处理")
            line = line + 2
            continue
        }

        def dpiFloat = dpiScale.toFloat()
        def dpiInt = dpiFloat.toInteger()
        if (dpiFloat == dpiInt) {
            map.put("dpiScale", dpiInt)
        } else {
            map.put("dpiScale", dpiFloat)
        }
        if (!material.isBlank()) {
            map.put("_name", material)
        }
        if (!resIdStr.isBlank()) {
            map.put("resIdStr", resIdStr)
            map.put("key", resIdStr)//key 等同于 resIdStr
            def code = resIdStr // 唯一标识
            if (laserType == 0) {
                code += "_blue"
            } else {
                code += "_white"
            }
            code += "_bw"
            code += "_${map.get("dpiScale")}"
            //
            map.put("code", code)
        }

        //---

        layerIndexList.eachWithIndex { value, index ->
            //图层参数
            def layerFill = row.getCell(value).toString()
            if (layerFill.isBlank() || layerFill == "/") {
                //填充图层参数为空, 跳过处理
            } else {
                def layerId = layerIdList[index]
                def pd = getPowerDepth(sheet, line, value)

                map.put("layerId", layerId)
                map.put("power", pd[0].toFloat().toInteger())
                map.put("depth", pd[1].toFloat().toInteger())

                jsonList.add(map.clone())
            }
        }

        //println jsonList
        //1 / 0

        //loop
        line = line + 2 //每次跳过2行, 正好包含功率和深度
    }

    def json = new com.google.gson.Gson().toJson(jsonList)
    outputFile.write(json)

    System.err.println "输出完成->" + outputFile.absolutePath
}

/**获取功率和深度
 * [sheet] 表
 * [lineIndex] 行索引, 0开始
 * [colIndex] 列索引, 0开始, 数据所在的列*/
def getPowerDepth(sheet, lineIndex, colIndex) {
    def row = sheet.getRow(lineIndex)
    def power = row.getCell(colIndex).toString()

    row = sheet.getRow(lineIndex + 1)
    def depth = row.getCell(colIndex).toString()

    return [power, depth]
}

/**
 * 输出一行的数据
 * [lineIndex] 行的索引
 * [row] 一行的数据
 * */
def printLine(lineIndex, row) {
    def colLabelList = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ"]
    def colCount = row.getPhysicalNumberOfCells()
    def log = "${colCount}列->"
    for (colIndex in 0..<colCount) {
        def cell = row.getCell(colIndex)
        log += "${colLabelList[colIndex]}${lineIndex + 1}:" + cell + " "
    }
    println log
}