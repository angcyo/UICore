/**
 * 2022-12-14
 * LaserPecker 从Excel中读取材质参数
 *
 * http://maxmoto1702.github.io/groovy-excel-builder/
 *
 * https://www.cnblogs.com/-beyond/p/12764501.html
 *
 * */
buildscript {
    repositories {
        mavenCentral()
        /*maven {
            url "http://repo.serebryanskiy.site/"
            allowInsecureProtocol = true
        }*/
    }
    dependencies {
        // https://mvnrepository.com/artifact/org.apache.poi/poi
        //classpath 'org.apache.poi:poi:5.2.3'
        classpath 'org.apache.poi:poi-ooxml:5.2.3'
        // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
        classpath 'org.apache.logging.log4j:log4j-core:2.20.0'

        //https://jcenter.bintray.com/com/google/code/gson/gson/
        classpath "com.google.code.gson:gson:2.10.1"
    }
}

task _excelMaterialLP4Blue(group: 'angcyo', description: 'LP4蓝光-LaserPecker 从Excel中读取材质参数') {
    //配置任务
}

task _excelMaterialLP4White(group: 'angcyo', description: 'LP4白光-LaserPecker 从Excel中读取材质参数') {
    //配置任务
}

task _excelMaterialLX1Blue10(group: 'angcyo', description: 'LX1 10W 蓝光') {
    //配置任务
}

task _excelMaterialLX1Blue20(group: 'angcyo', description: 'LX1 20W 蓝光') {
    //配置任务
}

task _excelMaterialLX1White2(group: 'angcyo', description: 'LX1 2W 白光') {
    //配置任务
}

task _excelMaterialLP5Blue(group: 'angcyo', description: 'LP5蓝光-LaserPecker 从Excel中读取材质参数') {
    //配置任务
}

task _excelMaterialLP5White(group: 'angcyo', description: 'LP5白光-LaserPecker 从Excel中读取材质参数') {
    //配置任务
}

//#1:1064nm激光 (白光-雕) 0:450nm激光 (蓝光-烧)

//执行LP4蓝光任务
_excelMaterialLP4Blue.doLast {
    def laserType = 0
    def layerIndexList = [9, 11, 13, 15] //图层数据开始的列数
    def layerIdList = ["layerFill", "layerPicture", "layerLine", "layerCut"]
    exportExcelData('material_lp.xlsx', "LP4_450_10", laserType, layerIndexList, layerIdList)
}

//执行LP4白光任务
_excelMaterialLP4White.doLast {
    //激光类型
    def laserType = 1
    def layerIndexList = [3, 5, 7] //图层数据开始的列数
    def layerIdList = ["layerFill", "layerPicture", "layerLine"]
    exportExcelData('material_lp.xlsx', "LP4_1064_2", laserType, layerIndexList, layerIdList)
}

_excelMaterialLX1Blue10.doLast {
    def laserType = 0
    def layerIndexList = [3, 5, 7, 9] //图层数据开始的列数
    def layerIdList = ["layerFill", "layerPicture", "layerLine", "layerCut"]
    exportExcelData('material_lx.xlsx', "LX1_450_10", laserType, layerIndexList, layerIdList)
}

_excelMaterialLX1Blue20.doLast {
    def laserType = 0
    def layerIndexList = [19, 21, 23, 25] //图层数据开始的列数
    def layerIdList = ["layerFill", "layerPicture", "layerLine", "layerCut"]
    exportExcelData('material_lx.xlsx', "LX1_450_20", laserType, layerIndexList, layerIdList)
}

_excelMaterialLX1White2.doLast {
    def laserType = 1
    def layerIndexList = [13, 15, 17] //图层数据开始的列数
    def layerIdList = ["layerFill", "layerPicture", "layerLine"]
    exportExcelData('material_lx.xlsx', "LX1_1064_2", laserType, layerIndexList, layerIdList, [
            "1": 254,
            "2": 711,
            "4": 889,
    ])
}

//执行LP5蓝光任务
_excelMaterialLP5Blue.doLast {
    def laserFilter = "蓝光"
    def laserType = 0
    exportExcelLp5Data('material_lp5.xlsx', "LP5_450_20", laserFilter, laserType)
}

//执行LP5白光任务
_excelMaterialLP5White.doLast {
    //激光类型
    def laserFilter = "白光"
    def laserType = 1
    exportExcelLp5Data('material_lp5.xlsx', "LP5_1064_20", laserFilter, laserType)
}

/**
 * [outputName] 输出的文件名, 不含扩展字段
 * [laserType] 激光类型 0:450nm激光 (蓝光-烧) 1:1064nm激光 (白光-雕)
 * [dpiMap] dpi映射, 比如识别到2.8K, 需要映射成多少dpi
 * */
def exportExcelData(defExcelPath, outputName, laserType, layerIndexList, layerIdList, dpiMap = null) {
    //默认的excel文件路径
    //def defExcelPath = 'material.xlsx'
    def excelPath = project.hasProperty("excel_path") ? project.ext.excel_path : defExcelPath
    def excelFile = file(excelPath)
    //println excelFile.absolutePath

    if (!excelFile.exists()) {
        throw new IllegalStateException("请在[gradle.properties]文件中配置excel文件路径:excel_path")
    }

    //输出文件
    def outputFile = file("material_${outputName}.json")

    //读取数据
    // 指定excel文件，创建缓存输入流
    def inputStream = new BufferedInputStream(new FileInputStream(excelFile))
    // 直接传入输入流即可，此时excel就已经解析了
    def workbook = new org.apache.poi.xssf.usermodel.XSSFWorkbook(inputStream)
    //println workbook
    def sheet = workbook.getSheetAt(0)

    //集合
    def jsonList = new ArrayList<Map<String, Object>>()

    def beforeMaterial = null //之前的材质
    def beforeResIdStr = null //之前的本地资源key

    def line = 3 //从第3行开始才有读取数据
    //println("总行数:${sheet.getPhysicalNumberOfRows()}")
    //1 / 0
    while (line < sheet.getPhysicalNumberOfRows()) {//一组一组读取(1K/2K/4K 一次性读取功率深度)
        def row = sheet.getRow(line)
        //printLine(line, row)
        //1 / 0
        def material = row.getCell(0).toString() //材质名称 环保纸
        def dpiCell = row.getCell(1).toString() //分辨率 1K 2K 4K
        def dpiScaleStr = dpiCell.toLowerCase().replace("k", "") //缩放比例
        def dpiStr = "" //具体的dpi

        //
        if (!material.isBlank()) {
            def i = material.lastIndexOf("/")
            if (i != -1) {
                def l = material.length()
                beforeMaterial = material.substring(0, i)
                beforeResIdStr = material.substring(i + 1, l)
            }
        }

        material = beforeMaterial
        def resIdStr = beforeResIdStr

        def map = new HashMap<String, Object>()
        map.put("type", laserType)

        if (dpiScaleStr.isBlank()) {
            //dpiScale 为空, 跳过处理
            println("${material} -> dpiScale 为空, 跳过处理")
            line = line + 2
            continue
        } else if (dpiScaleStr.contains("/")) {
            dpiStr = dpiScaleStr.split("/")[1]
            dpiScaleStr = dpiScaleStr.split("/")[0]
        }

        //dpi
        if (!dpiStr.isBlank()) {
            def dpiFloat = dpiStr.toFloat()
            def dpiInt = dpiStr.toInteger()
            if (dpiFloat == dpiInt) {
                map.put("dpi", dpiInt)
            } else {
                map.put("dpi", dpiFloat)
            }
        }

        //dpiScale
        def dpiScaleFloat = dpiScaleStr.toFloat()
        def dpiScaleInt = dpiScaleFloat.toInteger()
        if (dpiScaleFloat == dpiScaleInt) {
            map.put("dpiScale", dpiScaleInt)
        } else {
            map.put("dpiScale", dpiScaleFloat)
        }
        if (!material.isBlank()) {
            map.put("_name", material)
        }

        //dpi map
        if (dpiMap != null) {
            //如果有映射, 则使用映射
            map.remove("dpiScale")
            map.put("dpi", dpiMap.get(dpiScaleStr))
        }

        if (!resIdStr.isBlank()) {
            map.put("resIdStr", resIdStr)
            map.put("key", resIdStr)//key 等同于 resIdStr
        }

        //---

        layerIndexList.eachWithIndex { value, index ->
            //图层参数
            def layerId = layerIdList[index]
            def layer = row.getCell(value).toString()

            println("${material} ${dpiScaleFloat} -> ${layerId} -> ${layer}")

            if (layer.isBlank() || layer == "/") {
                //图层参数为空, 跳过处理
                println("::${material} ${dpiScaleFloat} -> ${layerId} -> 无推荐参数, 跳过处理")
            } else {
                def code = resIdStr // 唯一标识
                if (laserType == 0) {
                    code += "_blue"
                } else {
                    code += "_white"
                }
                code += "_${layerId}"
                def dpi = map.get("dpi")
                if (dpi != null) {
                    code += "_${dpi}"
                } else {
                    code += "_${map.get("dpiScale")}"
                }
                map.put("code", code)
                //...end code

                def pd = getPowerDepth(sheet, line, value)

                map.put("layerId", layerId)
                map.put("power", pd[0].toFloat().toInteger())
                map.put("depth", pd[1].toFloat().toInteger())

                jsonList.add(map.clone())
            }
        }

        //println jsonList
        //1 / 0

        //loop
        line = line + 2 //每次跳过2行, 正好包含功率和深度
    }

    def json = new com.google.gson.Gson().toJson(jsonList)
    outputFile.write(json)

    System.err.println "输出完成->" + outputFile.absolutePath
}

/**获取功率和深度
 * [sheet] 表
 * [lineIndex] 行索引, 0开始
 * [colIndex] 列索引, 0开始, 数据所在的列*/
def getPowerDepth(sheet, lineIndex, colIndex) {
    def row = sheet.getRow(lineIndex)
    def power = row.getCell(colIndex).toString()

    row = sheet.getRow(lineIndex + 1)
    def depth = row.getCell(colIndex).toString()

    return [power, depth]
}

/**
 * 输出一行的数据
 * [lineIndex] 行的索引
 * [row] 一行的数据
 * */
def printLine(lineIndex, row) {
    def colLabelList = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "AA", "AB", "AC", "AD", "AE", "AF", "AG", "AH", "AI", "AJ", "AK", "AL", "AM", "AN", "AO", "AP", "AQ", "AR", "AS", "AT", "AU", "AV", "AW", "AX", "AY", "AZ"]
    def colCount = row.getPhysicalNumberOfCells()
    def log = "共${colCount}列->"
    for (colIndex in 0..<colCount) {
        def cell = row.getCell(colIndex)
        log += "${colLabelList[colIndex]}${lineIndex + 1}:" + cell + " "
    }
    println log
}

/**2024-8-29
 * [defExcelPath] excel文件路径
 * [outputName] 输出文件名
 * [laser] 需要过滤的激光光源
 * */
def exportExcelLp5Data(defExcelPath, outputName, laserFilter, laserType) {
    //默认的excel文件路径
    //def defExcelPath = 'material.xlsx'
    def excelPath = project.hasProperty("excel_path") ? project.ext.excel_path : defExcelPath
    def excelFile = file(excelPath)
    //println excelFile.absolutePath

    if (!excelFile.exists()) {
        throw new IllegalStateException("请在[gradle.properties]文件中配置excel文件路径:excel_path")
    }

    //输出文件
    def outputFile = file("material_${outputName}.json")

    //读取数据
    // 指定excel文件，创建缓存输入流
    def inputStream = new BufferedInputStream(new FileInputStream(excelFile))
    // 直接传入输入流即可，此时excel就已经解析了
    def workbook = new org.apache.poi.xssf.usermodel.XSSFWorkbook(inputStream)
    //println workbook
    def sheet = workbook.getSheetAt(0)

    //集合
    def jsonList = new ArrayList<Map<String, Object>>()

    def line = 1 //从第1行开始才有读取数据

    while (line < sheet.getPhysicalNumberOfRows()) {
        def row = sheet.getRow(line)
        //printLine(line, row)

        def laserTypeCell = row.getCell(3).toString()

        if (laserTypeCell == laserFilter) {
            //println "...$laserTypeCell"

            def map = new HashMap<String, Object>()
            map["type"] = laserType

            //图层
            def layerCell = row.getCell(4).toString()
            if (layerCell == "填充") {
                map["layerId"] = "layerFill"
            } else if (layerCell == "线条") {
                map["layerId"] = "layerLine"
            } else if (layerCell == "切割") {
                map["layerId"] = "layerCut"
            } else if (layerCell == "抖动") {
                map["layerId"] = "layerPicture"
            }

            //分辨率
            def dpiCell = row.getCell(5).toString()
            if (dpiCell.contains("k")) {
                map["dpi"] = dpiCell.replaceAll("k", "").toInteger() * 254
            } else {
                map["dpi"] = dpiCell.toFloat()
            }

            //出光频率
            def laserFrequencyCell = row.getCell(6).toString()
            if (laserFrequencyCell != "无") {
                //println "...$laserFrequencyCell"
                try {
                    def laserFrequency = laserFrequencyCell.toFloat().toInteger()
                    map["laserFrequency"] = laserFrequency
                } catch (e) {
                }
            }

            //功率深度
            def powerDepthCell = row.getCell(7).toString()
            if (!powerDepthCell.isBlank()) {
                def i = powerDepthCell.lastIndexOf(",")
                if (i != -1) {
                    def l = powerDepthCell.length()
                    map["power"] = powerDepthCell.substring(0, i).toInteger()
                    map["depth"] = powerDepthCell.substring(i + 1, l).toInteger()
                }
            }

            //材质名称 环保纸/resKey
            def material = row.getCell(2).toString()

            //
            if (!material.isBlank()) {
                def i = material.lastIndexOf("/")
                if (i != -1) {
                    def l = material.length()
                    def resIdStr = material.substring(i + 1, l)
                    material = material.substring(0, i)

                    map["_name"] = material
                    map["resIdStr"] = resIdStr
                    map["key"] = resIdStr
                }
            }

            def code = map["resIdStr"] // 唯一标识
            if (laserType == 0) {
                code += "_blue"
            } else {
                code += "_white"
            }
            code += "_${map["layerId"]}"
            def dpi = map.get("dpi")
            if (dpi != null) {
                code += "_${dpi}"
            } else {
                code += "_${map.get("dpiScale")}"
            }
            map["code"] = code

            jsonList.add(map)
        }

        //loop
        line++
    }

    def json = new com.google.gson.Gson().toJson(jsonList)
    outputFile.write(json)

    System.err.println "输出完成->" + outputFile.absolutePath
}