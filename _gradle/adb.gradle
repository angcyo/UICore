/**
 * 执行adb命令
 * */

def schema = project.hasProperty("schema") ? project.ext.schema : 'default'

static def getApplicationIdList(rootProject) {
    def appList = []
    def childProjects = rootProject.getChildProjects()
    childProjects.each {
        def application = "com.android.application"

        def projectObj = it.value
        def isApp = projectObj.plugins.hasPlugin(application)

        if (isApp) {
            def applicationPlugin = projectObj.plugins.findPlugin(application)
            appList += applicationPlugin.extension.defaultConfig.applicationId
        }
    }
    return appList
}

//https://docs.gradle.org/current/dsl/org.gradle.api.tasks.Exec.html
task _pullSchemaFolder(type: Exec) {
    def path = '../.pull'
    def file = file(path)
    workingDir(path)
    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString("UTF8")
    }
    doFirst {
        file.mkdirs()
        def appIdList = getApplicationIdList(rootProject)
        println "准备pull:$appIdList -> " + file.absolutePath

        try {
            exec {
                appIdList.forEach {
                    commandLine 'adb', 'pull', "/sdcard/android/data/${it}/files/${schema}/", file.absolutePath
                }
            }
        } catch (Exception e) {
            e.printStackTrace()
        }

        def target = "/sdcard/android/data/${appIdList.first()}/files/${schema}/"
        commandLine 'adb', 'pull', target, './'
    }
    doLast {
        println "执行结束,文件在: ${file.absolutePath} ↓"
        println ext.output()
    }
}