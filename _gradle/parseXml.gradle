/**
 * 2023-5-17
 * 读取xml中的数据, 输出到csv文件中
 *
 * https://www.jianshu.com/p/695507fcc24d
 * */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        //https://jcenter.bintray.com/com/squareup/okhttp3/
        classpath "com.squareup.okhttp3:okhttp:4.11.0"
        //https://jcenter.bintray.com/com/google/code/gson/gson/
        classpath "com.google.code.gson:gson:2.10.1"
    }
}

task _parseXml(group: 'angcyo', description: '读取xml中的数据, 输出到csv文件中') {
    //配置任务
}

task _translateCsv(group: 'angcyo', description: '一行一行翻译指定的Csv文件内容到csv文件中') {
    //配置任务
}

task _translateXml(group: 'angcyo', description: '翻译指定的xml文件内容到csv文件中') {
    //配置任务
}

_parseXml.doLast {
    //默认的xml文件路径
    def defXmlPath = '.apk/LaserPecker Android Resource(中文).xml'
    //默认的数据输出路径
    def defOutputPath = ''
    def xmlPath = project.hasProperty("xml_path") ? project.ext.xml_path : defXmlPath
    def file = file(xmlPath)

    if (!file.exists()) {
        throw new IllegalStateException("请在[gradle.properties]文件中配置xml文件路径:xml_path")
    }

    if (defOutputPath == null || defOutputPath.isEmpty()) {
        defOutputPath = file.getParentFile().getAbsolutePath() + "/${file.name}.csv"
    }

    //解析文件
    _parseFile(xmlPath, defOutputPath)
}

_translateCsv.doLast {
    def defCsvPath = ''
    //默认的数据输出路径
    def defOutputPath = ''
    def csvPath = project.hasProperty("csv_path") ? project.ext.csv_path : defCsvPath
    def file = file(csvPath)

    if (!file.exists()) {
        throw new IllegalStateException("请在[gradle.properties]文件中配置csv文件路径:csv_path")
    }

    if (defOutputPath == null || defOutputPath.isEmpty()) {
        defOutputPath = file.getParentFile().getAbsolutePath() + "/${file.name}.t"
    }

    //翻译的语种
    def tl = project.hasProperty("tl") ? project.ext.tl : ''

    if (tl == null || tl.isEmpty()) {
        throw new IllegalStateException("请在[gradle.properties]文件中配置翻译的语种:tl")
    }

    //解析文件
    _translateCsvFile(csvPath, defOutputPath, tl)
}

_translateXml.doLast {
    def defXmlPath = ''
    //默认的数据输出路径
    def defOutputPath = ''
    def csvPath = project.hasProperty("xml_path") ? project.ext.xml_path : defXmlPath
    def file = file(csvPath)

    if (!file.exists()) {
        throw new IllegalStateException("请在[gradle.properties]文件中配置xml文件路径:xml_path")
    }

    if (defOutputPath == null || defOutputPath.isEmpty()) {
        defOutputPath = file.getParentFile().getAbsolutePath() + "/${file.name}.t"
    }

    //翻译的语种
    def tl = project.hasProperty("tl") ? project.ext.tl : ''

    if (tl == null || tl.isEmpty()) {
        throw new IllegalStateException("请在[gradle.properties]文件中配置翻译的语种:tl")
    }

    //解析文件
    _translateXmlFile(csvPath, defOutputPath, tl)
}

def _parseFile(xmlPath, outPath) {
    def xmlFile = file(xmlPath)
    def output = file(outPath)
    output.delete()

    System.err.println "解析文件-> ${xmlFile.absolutePath}"
    def rootNode = openXml(xmlFile)
    rootNode.childNodes().each { node ->
        groovy.util.slurpersupport.Node
        //groovy.util.slurpersupport.Node
        //println "${node["name"]}:${node.text()}"
        //写入文件
        //output << "${node.attributes["name"]},${node.text()}\n"

        output << "${node.text()}\n"
    }
    System.err.println "输出路径-> ${output.absolutePath}"
}

/**翻译xml文件*/
def _translateXmlFile(xmlPath, outPath, tl) {
    def xmlFile = file(xmlPath)
    def output = file(outPath)
    output.delete()

    System.err.println "翻译文件-> ${xmlFile.absolutePath}"
    def rootNode = openXml(xmlFile)
    rootNode.childNodes().each { node ->
        groovy.util.slurpersupport.Node
        //groovy.util.slurpersupport.Node
        //println "${node["name"]}:${node.text()}"
        //写入文件
        //output << "${node.attributes["name"]},${node.text()}\n"

        def text = node.text()
        //翻译
        def result = translate(text, tl)
        output << "${text},${result}\n"
    }
    System.err.println "输出路径-> ${output.absolutePath}"
}

/**翻译csv文件*/
def _translateCsvFile(csvPath, outPath, tl) {
    def csvFile = file(csvPath)
    def output = file(outPath)
    output.delete()

    System.err.println "翻译文件-> ${csvFile.absolutePath}"

    def lines = csvFile.text.readLines()
    lines.forEach { line ->
        def text = line //.split(",")[0]
        //翻译
        def result = translate(text, tl)
        output << "${text},${result}\n"
    }
    System.err.println "输出路径-> ${output.absolutePath}"
}

/**翻译字符串[q], 到语种[]*/
def translate(q, tl) {
    def q2 = URLEncoder.encode(q, "UTF-8")
    def url = "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=${tl}&dt=t&q=${q2}"
    //get请求url
    def clientBuilder = new okhttp3.OkHttpClient.Builder()
    okhttp3.OkHttpClient client = clientBuilder.build()

    def request = new okhttp3.Request.Builder()
            .url(url)
            .get()
            .build()
    try {
        def response = client.newCall(request).execute()
        def bodyString = response.body().string()

        System.err.println "翻译结果[$q]-> ${bodyString}"

        if (response.code() != 200) {
            System.err.println "翻译失败!"
            throw new IllegalStateException("翻译失败!")
        }

        def json = new groovy.json.JsonSlurper().parseText(bodyString)
        def result = json[0][0][0]
        try {
            return URLDecoder.decode(result, "UTF-8")
        } catch (IllegalArgumentException e) {
            //解码失败, 忽略. URLDecoder: Incomplete trailing escape (%) pattern
            return result
        }
    } catch (SocketTimeoutException e) {
        //网络错误, 重试
        return translate(q, tl)
    } catch (Exception e) {
        e.printStackTrace()
        throw e
    }
}

/**
 * 获取一个 GPathResult 对象
 * @see groovy.util.slurpersupport.GPathResult*                                                                                                                 */
static def openXml(xmlFile) {
    def xmlSlurper = new groovy.util.XmlSlurper()
    def result = xmlSlurper.parse(xmlFile)
    return result
}


/**支持的翻译语种:
 LANGUAGE.put("阿尔巴尼亚语", "sq");
 LANGUAGE.put("阿拉伯语", "ar");
 LANGUAGE.put("阿塞拜疆语", "az");
 LANGUAGE.put("爱尔兰语", "ga");
 LANGUAGE.put("爱沙尼亚语", "et");
 LANGUAGE.put("巴斯克语", "eu");
 LANGUAGE.put("白俄罗斯语", "be");
 LANGUAGE.put("保加利亚语", "bg");
 LANGUAGE.put("冰岛语", "is");
 LANGUAGE.put("波兰语", "pl");
 LANGUAGE.put("波斯语", "fa");
 LANGUAGE.put("布尔语", "af");
 LANGUAGE.put("南非荷兰语", "af");
 LANGUAGE.put("丹麦语", "da");
 LANGUAGE.put("德语", "de");
 LANGUAGE.put("俄语", "ru");
 LANGUAGE.put("法语", "fr");
 LANGUAGE.put("菲律宾语", "tl");
 LANGUAGE.put("芬兰语", "fi");
 LANGUAGE.put("格鲁吉亚语", "ka");
 LANGUAGE.put("古吉拉特语", "gu");
 LANGUAGE.put("海地克里奥尔语", "ht");
 LANGUAGE.put("韩语", "ko");
 LANGUAGE.put("荷兰语", "nl");
 LANGUAGE.put("加利西亚语", "gl");
 LANGUAGE.put("加泰罗尼亚语", "ca");
 LANGUAGE.put("捷克语", "cs");
 LANGUAGE.put("卡纳达语", "kn");
 LANGUAGE.put("克罗地亚语", "hr");
 LANGUAGE.put("拉丁语", "la");
 LANGUAGE.put("拉脱维亚语", "lv");
 LANGUAGE.put("老挝语", "lo");
 LANGUAGE.put("立陶宛语", "lt");
 LANGUAGE.put("罗马尼亚语", "ro");
 LANGUAGE.put("马耳他语", "mt");
 LANGUAGE.put("马来语", "ms");
 LANGUAGE.put("马其顿语", "mk");
 LANGUAGE.put("孟加拉语", "bn");
 LANGUAGE.put("挪威语", "no");
 LANGUAGE.put("葡萄牙语", "pt");
 LANGUAGE.put("日语", "ja");
 LANGUAGE.put("瑞典语", "sv");
 LANGUAGE.put("塞尔维亚语", "sr");
 LANGUAGE.put("世界语", "eo");
 LANGUAGE.put("斯洛伐克语", "sk");
 LANGUAGE.put("斯洛文尼亚语", "sl");
 LANGUAGE.put("斯瓦希里语", "sw");
 LANGUAGE.put("泰卢固语", "te");
 LANGUAGE.put("泰米尔语", "ta");
 LANGUAGE.put("泰语", "th");
 LANGUAGE.put("土耳其语", "tr");
 LANGUAGE.put("威尔士语", "cy");
 LANGUAGE.put("乌尔都语", "ur");
 LANGUAGE.put("乌克兰语", "uk");
 LANGUAGE.put("希伯来语", "iw");
 LANGUAGE.put("希腊语", "el");
 LANGUAGE.put("西班牙语", "es");
 LANGUAGE.put("匈牙利语", "hu");
 LANGUAGE.put("亚美尼亚语", "hy");
 LANGUAGE.put("意大利语", "it");
 LANGUAGE.put("意第绪语", "yi");
 LANGUAGE.put("印地语", "hi");
 LANGUAGE.put("印尼语", "id");
 LANGUAGE.put("英语", "en");
 LANGUAGE.put("越南语", "vi");
 LANGUAGE.put("中文繁体", "zh-TW");
 LANGUAGE.put("中文简体", "zh-CN");
 */