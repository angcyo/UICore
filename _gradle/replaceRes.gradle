/**
 * 2023-3-24
 * 替换xml文件中的字符串资源
 * */

task _replaceRes(group: 'angcyo', description: '替换xml文件中的字符串资源') {
    //配置任务
}

task _replaceResTo(group: 'angcyo', description: '替换xml文件中的字符串资源并输出到指定文件') {
    //配置任务
}

task _writeRes(group: 'angcyo', description: '将指定的内容写入到资源文件') {
    //配置任务
}

task _replaceZhResTo(group: 'angcyo', description: '替换中文资源到其他资源') {
    //配置任务
}

_replaceRes.doFirst {
    replaceResWithCsv()
    //replaceResWithExcel()
}

_replaceResTo.doFirst {
    //将中文资源替换成其他语言的资源, 并输出

    //资源输入文件路径
    /*def inputResPath = file("./UICoreEx/lpDevice/src/main/res/values-zh/material_strings.xml").absolutePath
    def lines = readExcelLines("翻译稿.xlsx", 1)
    def outputLanguage = ["en", "ja", "ko", "es", "fr", "de"*//*,  "rHK", "rTW"*//*]
    outputLanguage.eachWithIndex { value, index ->
        _replaceRes(inputResPath, "material_strings_${value}.xml", convertLinesToMap(lines, 0, index + 1))
    }*/

    //_replaceRes(inputResPath, "material_strings_en.xml", convertLinesToMap(lines, 0, 1))
    //_replaceRes(inputResPath, "material_strings_ja.xml", convertLinesToMap(lines, 0, 2))
    //_replaceRes(inputResPath, "material_strings_ko.xml", convertLinesToMap(lines, 0, 3))
    //_replaceRes(inputResPath, "material_strings_de.xml", convertLinesToMap(lines, 0, 4))
    //_replaceRes(inputResPath, "material_strings_es.xml", convertLinesToMap(lines, 0, 5))
    //_replaceRes(inputResPath, "material_strings_fr.xml", convertLinesToMap(lines, 0, 6))
    //_replaceRes(inputResPath, "material_strings_rHk.xml", convertLinesToMap(lines, 0, 7))

    def inputResPath = file("./UICoreEx/canvas2_lp/src/main/res/values-zh/canvas2_string.xml").absolutePath
    def lines = readExcelLines("canvas4.xlsx", 1)
    def outputLanguage = ["en", "ja", "de", "fr", "ko", "es",]
    outputLanguage.eachWithIndex { value, index ->
        def outPath = "./UICoreEx/canvas2_lp/src/main/res/values-${value}/canvas2_string.xml"
        if (value == "en") {
            outPath = outPath.replaceAll("-en", "")
        }
        _replaceRes(inputResPath, outPath, convertLinesToMap(lines, 0, index + 1))
    }
}

_writeRes.doFirst {
    //需要读取的excel文件路径
    def excelPath = "excel.xlsx"
    //对应的国际化资源名称
    def language = ["zh", "en", "ja", "ko", "de", "es", "fr", "zh-rHK", "zh-rTW"]
    //language对应的列, 从1开始
    def languageColumn = [1, 2, 3, 4, 5, 6, 7, 8, 8]

    //需要写入的资源key
    def resKeyList = [
            "engrave_type"
    ]

    //res翻译资源从第几行开始
    def resStartRowIndex = 2
    resKeyList.eachWithIndex { resKey, resKeyIndex ->
        def row = resStartRowIndex + resKeyIndex

        //开始写入res key对应的各个翻译
        language.eachWithIndex { lan, index ->
            //def resPath = "./UICoreEx/lpDevice/src/main/res/values-${lan}/device_strings.xml"
            def resPath = "./UICoreEx/canvas2_lp/src/main/res/values-${lan}/canvas2_string.xml"
            if (lan == "en") {
                resPath = resPath.replaceAll("-en", "")
            }
            def file = file(resPath)
            if (file.exists()) {
                //在文件倒数第1行插入
                file.text = file.text.replaceAll("</resources>", "")

                def value = readExcelValue(excelPath, row, languageColumn[index])
                if (value != null && !value.isEmpty()) {
                    file.append("    <string name=\"${resKey}\">${value}</string>")
                    file.append("\n")

                    println("${resPath} 写入 ${resKey} -> ${value}")
                }

                file.append("</resources>")
            } else {
                System.err.println("文件不存在,跳过处理:${file.absolutePath}")
            }
        }
    }
}

_replaceZhResTo.doFirst {
    //将中文资源替换成其他语言的资源, 并输出
    //./UICoreEx/lpDevice/src/main/res/values-zh/material_strings.xml
    def zhPathArray = getLanguageResPath("-zh")
    def dePathArray = getLanguageResPath("-de")

    def lines = readExcelLines("res.xlsx", 1, 2)
    zhPathArray.eachWithIndex { zhPath, index ->
        _replaceRes(zhPath, dePathArray[index], lines)
    }
}

/**使用excel的数据结构替换res*/
def replaceResWithExcel() {
    //8国资源都在这里
    def lines = readExcelLines("翻译稿.xlsx")

    //_replaceLanguageFile("-zh", "", convertLinesToMap(lines, 0, 1))
    //_replaceLanguageFile("-zh", "-ja", convertLinesToMap(lines, 0, 2))
    //_replaceLanguageFile("-zh", "-ko", convertLinesToMap(lines, 0, 3))
    //_replaceLanguageFile("-zh", "-de", convertLinesToMap(lines, 0, 4))
    //_replaceLanguageFile("-zh", "-es", convertLinesToMap(lines, 0, 5))
    //_replaceLanguageFile("-zh", "-fr", convertLinesToMap(lines, 0, 6))
    _replaceLanguageFile("-zh", "-zh-rHK", convertLinesToMap(lines, 0, 7))
    //_replaceLanguageFile("-zh", "-zh-rTW", convertLinesToMap(lines, 0, 7))
}

/**使用csv的数据结构替换res*/
def replaceResWithCsv() {
    def csvPath = file("res.csv").absolutePath

    def enCsvPath = file("en.csv")
    def jaCsvPath = file("ja.csv")
    def koCsvPath = file("ko.csv")
    def frCsvPath = file("fr.csv")
    def deCsvPath = file("de.csv")
    def esCsvPath = file("es.csv")

    def rHKCsvPath = file("zh_rHK.csv")
    def rTWCsvPath = rHKCsvPath

    //_replaceLanguageFile("-zh", "", _readCsvMap(enCsvPath))
    //_replaceLanguageFile("-zh", "-ja", _readCsvMap(jaCsvPath))
    //_replaceLanguageFile("-zh", "-ko", _readCsvMap(koCsvPath))
    //_replaceLanguageFile("-zh", "-fr", _readCsvMap(frCsvPath))
    //_replaceLanguageFile("-zh", "-de", _readCsvMap(deCsvPath))
    //_replaceLanguageFile("-zh", "-es", _readCsvMap(esCsvPath))
    _replaceLanguageFile("-zh", "-zh-rHK", _readCsvMap(rHKCsvPath))
    _replaceLanguageFile("-zh", "-zh-rTW", _readCsvMap(rTWCsvPath))
}

/**合并指定语言的xml文件
 * [inLanguage] 原来的语言数据
 * [outLanguage] 需要在原来的语言上替换成什么语言的数据*/
def _replaceLanguageFile(inLanguage, outLanguage, map) {
    _replaceResList(getLanguageResPath(inLanguage), getLanguageResPath(outLanguage), map)
}

/**读取csv文件, 返回对应的map*/
def _readCsvMap(path) {
    def pathFile = file(path)
    def lines = pathFile.text.readLines()
    def result = [:]
    lines.forEach { line ->
        def lineList = line.split(",")
        if (lineList.size() >= 2) {
            result[lineList[0]] = lineList[1]
        }
    }
    return result
}

def _replaceResList(pathList, outPathList, map) {
    pathList.eachWithIndex { path, index ->
        _replaceRes(path, outPathList[index], map)
    }
}

/**将原始文件内容替换成新的资源内容, 并输出到指定文件
 * [path] 需要替换的文件路径
 * [outPath] 替换后的输出文件路径
 * [map] 需要替换的键值对映射表
 * */
def _replaceRes(path, outPath, map) {

    //input
    def pathFile = file(path)
    if (!pathFile.exists()) {
        System.err.println "输入文件不存在:${pathFile.absolutePath}"
        return
    }
    def originText = pathFile.text //原始文件内容

    //output
    def outPathFile = file(outPath)
    if (!outPathFile.exists()) {
        outPathFile.parentFile.mkdirs()
        outPathFile.createNewFile()
    }

    //保留output中不需要替换的内容
    def outOriginText = outPathFile.text
    //逐行比对是否需要替换
    def originLines = originText.lines().toList()
    def outLines = outOriginText.lines().toList()
    originLines.eachWithIndex { line, index ->
        if (line != null && !line.isEmpty()) {
            if (!_isContainsResKey(line, map)) {
                //当前的行, 不包含需要替换的资源, 则保留output中的内容
                if (index < outLines.size()) {
                    originLines[index] = outLines[index]
                }
            }
        }
    }
    originText = originLines.join("\n")

    //开始替换内容
    def count = 0
    def replaceMap = [] //已替换的资源
    map.each { key, val ->
        if (key != null && !key.isEmpty()) {
            def resKey = ">${key}<"
            if (originText.contains(resKey)) {
                originText = originText.replaceAll(resKey, ">${val}<")//替换资源
                count++

                replaceMap += key
            }
        }
    }

    outPathFile.write(originText)//重写文件

    println "已替换:${replaceMap}"
    System.err.println "替换完成:${pathFile.absolutePath}↓\n->${outPathFile.absolutePath} 共替换:${count}个"
}

/// 指定的文本中是否包含需要替换的资源
static def _isContainsResKey(text, map) {
    def contains = false
    map.each { key, value ->
        if (key != null && !key.isEmpty()) {
            def resKey = ">${key}<"
            //println("text:$text resKey:${resKey}")
            if (text.contains(resKey)) {
                contains = true
                return
            }
        }
    }
    return contains
}