/**
 * 2023-3-24
 * 替换xml文件中的字符串资源
 * */

task _replaceRes(group: 'angcyo', description: '替换xml文件中的字符串资源') {
    //配置任务
}

task _replaceResTo(group: 'angcyo', description: '替换xml文件中的字符串资源并输出到指定文件') {
    //配置任务
}

_replaceRes.doFirst {
    replaceResWithCsv()
    //replaceResWithExcel()
}

_replaceResTo.doFirst {
    //将中文资源替换成其他语言的资源, 并输出

    //资源输入文件路径
    def inputResPath = file("./UICoreEx/lpDevice/src/main/res/values-zh/material_strings.xml").absolutePath
    def lines = readExcelLines("翻译稿.xlsx", 1)
    def outputLanguage = ["en", "ja", "ko", "es", "fr", "de"/*,  "rHK", "rTW"*/]
    outputLanguage.eachWithIndex { value, index ->
        _replaceRes(inputResPath, "material_strings_${value}.xml", convertLinesToMap(lines, 0, index + 1))
    }

    //_replaceRes(inputResPath, "material_strings_en.xml", convertLinesToMap(lines, 0, 1))
    //_replaceRes(inputResPath, "material_strings_ja.xml", convertLinesToMap(lines, 0, 2))
    //_replaceRes(inputResPath, "material_strings_ko.xml", convertLinesToMap(lines, 0, 3))
    //_replaceRes(inputResPath, "material_strings_de.xml", convertLinesToMap(lines, 0, 4))
    //_replaceRes(inputResPath, "material_strings_es.xml", convertLinesToMap(lines, 0, 5))
    //_replaceRes(inputResPath, "material_strings_fr.xml", convertLinesToMap(lines, 0, 6))
    //_replaceRes(inputResPath, "material_strings_rHk.xml", convertLinesToMap(lines, 0, 7))
}

/**使用excel的数据结构替换res*/
def replaceResWithExcel() {
    //8国资源都在这里
    def lines = readExcelLines("翻译稿.xlsx")

    //_replaceLanguageFile("-zh", "", convertLinesToMap(lines, 0, 1))
    //_replaceLanguageFile("-zh", "-ja", convertLinesToMap(lines, 0, 2))
    //_replaceLanguageFile("-zh", "-ko", convertLinesToMap(lines, 0, 3))
    //_replaceLanguageFile("-zh", "-de", convertLinesToMap(lines, 0, 4))
    //_replaceLanguageFile("-zh", "-es", convertLinesToMap(lines, 0, 5))
    //_replaceLanguageFile("-zh", "-fr", convertLinesToMap(lines, 0, 6))
    _replaceLanguageFile("-zh", "-zh-rHK", convertLinesToMap(lines, 0, 7))
    //_replaceLanguageFile("-zh", "-zh-rTW", convertLinesToMap(lines, 0, 7))
}

/**使用csv的数据结构替换res*/
def replaceResWithCsv() {
    def csvPath = file("res.csv").absolutePath

    def enCsvPath = file("en.csv")
    def jaCsvPath = file("ja.csv")
    def koCsvPath = file("ko.csv")
    def frCsvPath = file("fr.csv")
    def deCsvPath = file("de.csv")
    def esCsvPath = file("es.csv")

    def rHKCsvPath = file("zh_rHK.csv")
    def rTWCsvPath = rHKCsvPath

    //_replaceLanguageFile("-zh", "", _readCsvMap(enCsvPath))
    //_replaceLanguageFile("-zh", "-ja", _readCsvMap(jaCsvPath))
    //_replaceLanguageFile("-zh", "-ko", _readCsvMap(koCsvPath))
    //_replaceLanguageFile("-zh", "-fr", _readCsvMap(frCsvPath))
    //_replaceLanguageFile("-zh", "-de", _readCsvMap(deCsvPath))
    //_replaceLanguageFile("-zh", "-es", _readCsvMap(esCsvPath))
    _replaceLanguageFile("-zh", "-zh-rHK", _readCsvMap(rHKCsvPath))
    _replaceLanguageFile("-zh", "-zh-rTW", _readCsvMap(rTWCsvPath))
}

/**合并指定语言的xml文件
 * [inLanguage] 原来的语言数据
 * [outLanguage] 需要在原来的语言上替换成什么语言的数据*/
def _replaceLanguageFile(inLanguage, outLanguage, map) {
    _replaceResList(getLanguageResPath(inLanguage), getLanguageResPath(outLanguage), map)
}

/**读取csv文件, 返回对应的map*/
def _readCsvMap(path) {
    def pathFile = file(path)
    def lines = pathFile.text.readLines()
    def result = [:]
    lines.forEach { line ->
        def lineList = line.split(",")
        if (lineList.size() >= 2) {
            result[lineList[0]] = lineList[1]
        }
    }
    return result
}

def _replaceResList(pathList, outPathList, map) {
    pathList.eachWithIndex { path, index ->
        _replaceRes(path, outPathList[index], map)
    }
}

/**替换资源
 * [path] 需要替换的文件路径
 * [outPath] 替换后的输出文件路径
 * [map] 需要替换的键值对映射表
 * */
def _replaceRes(path, outPath, map) {
    def pathFile = file(path)
    if (!pathFile.exists()) {
        System.err.println "输入文件不存在:${pathFile.absolutePath}"
        return
    }
    def originText = pathFile.text //原始文件内容
    def count = 0
    def replaceMap = [] //已替换的资源
    map.each { key, val ->
        if (key != null && !key.isEmpty()) {
            def resKey = ">${key}<"
            if (originText.contains(resKey)) {
                originText = originText.replaceAll(resKey, ">${val}<")//替换资源
                count++

                replaceMap += key
            }
        }
    }
    def outPathFile = file(outPath)
    if (!outPathFile.exists()) {
        outPathFile.parentFile.mkdirs()
        outPathFile.createNewFile()
    }
    outPathFile.write(originText)//重写文件

    println "已替换:${replaceMap}"
    System.err.println "替换完成:${pathFile.absolutePath}↓\n->${outPathFile.absolutePath} 共替换:${count}个"
}
