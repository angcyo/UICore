/**
 * 2023-3-24
 * 替换xml文件中的字符串资源
 * */

task _replaceRes(group: 'angcyo', description: '替换xml文件中的字符串资源') {
    //配置任务
}

_replaceRes.doFirst {
    def csvPath = file("res.csv").absolutePath

    def pathListZh = []
    //pathListZh += "./UICore/crop/src/main/res/values-zh/crop_strings.xml"
    pathListZh += "./UICore/doodle/src/main/res/values-zh/doodle_strings.xml"
    pathListZh += "./UICore/canvas/src/main/res/values-zh/canvas_strings.xml"

    pathListZh += "./UICoreEx/canvas_lp/src/main/res/values-zh/canvas_strings.xml"
    //pathListZh += "./UICoreEx/engrave/src/main/res/values-zh/engrave_strings.xml"
    pathListZh += "./UICoreEx/fsc/src/main/res/values-zh/fsc_strings.xml"

    def pathOutListZh = []
    //pathOutListZh += "./UICore/crop/src/main/res/values-ja/crop_strings.xml"
    pathOutListZh += "./UICore/doodle/src/main/res/values-ja/doodle_strings.xml"
    pathOutListZh += "./UICore/canvas/src/main/res/values-ja/canvas_strings.xml"

    pathOutListZh += "./UICoreEx/canvas_lp/src/main/res/values-ja/canvas_strings.xml"
    //pathOutListZh += "./UICoreEx/engrave/src/main/res/values-ja/engrave_strings.xml"
    pathOutListZh += "./UICoreEx/fsc/src/main/res/values-ja/fsc_strings.xml"

    _replaceResList(pathListZh, pathOutListZh, _readCsvMap(csvPath))
}

/**读取csv文件, 返回对应的map*/
def _readCsvMap(path) {
    def pathFile = file(path)
    def lines = pathFile.text.readLines()
    def result = [:]
    lines.forEach { line ->
        def lineList = line.split(",")
        if (lineList.size() >= 2) {
            result[lineList[0]] = lineList[1]
        }
    }
    return result
}

def _replaceResList(pathList, outPathList, map) {
    pathList.eachWithIndex { path, index ->
        _replaceRes(path, outPathList[index], map)
    }
}

/**替换资源
 * [path] 需要替换的文件路径
 * [outPath] 替换后的输出文件路径
 * [map] 需要替换的键值对映射表
 * */
def _replaceRes(path, outPath, map) {
    def pathFile = file(path)
    if (!pathFile.exists()) {
        return
    }
    def originText = pathFile.text //原始文件内容
    def count = 0
    map.each { key, val ->
        if (key != null && !key.isEmpty()) {
            def resKey = ">${key}<"
            if (originText.contains(resKey)) {
                originText = originText.replaceAll(resKey, ">${val}<")//替换资源
                count++
            }
        }
    }
    def outPathFile = file(outPath)
    if (!outPathFile.exists()) {
        outPathFile.parentFile.mkdirs()
        outPathFile.createNewFile()
    }
    outPathFile.write(originText)//重写文件
    System.err.println "替换完成:${pathFile.absolutePath}↓\n->${outPathFile.absolutePath} 共:${count}"
}
